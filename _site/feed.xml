<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-03T22:45:20+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Varsha Kulkarni</title><subtitle>Errs Unravelled</subtitle><entry><title type="html">Deeplinks</title><link href="http://localhost:4000/2022/08/02/deeplinks.html" rel="alternate" type="text/html" title="Deeplinks" /><published>2022-08-02T00:00:00+05:30</published><updated>2022-08-02T00:00:00+05:30</updated><id>http://localhost:4000/2022/08/02/deeplinks</id><content type="html" xml:base="http://localhost:4000/2022/08/02/deeplinks.html">&lt;p&gt;If you are trying to access your app from web, trying to click on a link which automatically opens the app without ambiguity, you need app links to be created.
Before Android 12 (API 31), adding intent filters under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Activity&lt;/code&gt; which needs to open on link clicking would open the app, may be with some amibguity.
 But if targetSdk is set to 31, there are mandatory steps need to be followed, otherwise the link can open only on the browser.&lt;/p&gt;

&lt;p&gt;Follow the step from Android documentation &lt;a href=&quot;https://developer.android.com/training/app-links&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://developer.android.com/studio/write/app-link-indexing&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Things to note here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you are using multple domains ensure that all the domains have hosted correct assetlinks.json.&lt;/li&gt;
  &lt;li&gt;If verification of under one domain fails, then entire verification fails.
    &lt;blockquote&gt;
      &lt;p&gt;Note: On Android 11 (API level 30) and lower, the system establishes your app as the default handler for the specified URL patterns only if it finds a matching Digital Asset Links file for all hosts in the manifest.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Install the app through adb, or run the following command, open logcat and see the verification process working.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ adb shell pm verify-app-links --re-verify &amp;lt;PACKAGE_NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Filter with &lt;strong&gt;IntentFilterIntentOp&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I/IntentFilterIntentOp: Verification 23 complete. Success:true. Failed hosts:. [CONTEXT service_id=244 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure the sha256_cert_fingerprints are correct.
sha256_cert_fingerprints of debug &amp;amp; release keystore are different.
If only release fingerprints are added on assetlinks.json, the verification doesn’t work on debug version. so adb shell pm get-app-links &lt;PACKAGE_NAME&gt; returns legacy_failure.
It will work if both fingerprints are added(debug &amp;amp; release) on assetlinks.json&lt;/PACKAGE_NAME&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ensure there are no syntax errors or unnecessary spaces or special characters added to assetlinks.json
It is better to use App Links Assistant tool provided by Android Studio to create this file instead of manually creating.
For testing the assetlinks.json statements are correct, use &lt;a href=&quot;https://developers.google.com/digital-asset-links/tools/generator&quot;&gt;this&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If verifying manually, the typical output expected:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ adb shell pm get-app-links --user cur
 com.example
  com.example:
    ID: 90a79cb0-b63c-4ffa-aeb7-b3ad109a7272
    Signatures: [ED:64:B4:70:53:31:7E:C0:F4:99:9B:F9:49:AA:D1:0F:1D:63:75:B1:CB:03:DD:5D:D7:BC:E3:E2:7D:2E:00:29]
    Domain verification state:
      api.prod.example.com: legacy_failure
      api.test.example.com: legacy_failure
      api.dev.example.com: legacy_failure
    User 0:
      Verification link handling allowed: true
      Selection state:
        Disabled:
          api.prod.example.com
          api.test.example.com
          api.dev.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ adb shell pm set-app-links --package com.example 0 all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ adb shell pm get-app-links --user cur
 com.example
  com.example:
    ID: 90a79cb0-b63c-4ffa-aeb7-b3ad109a7272
    Signatures: [ED:64:B4:70:53:31:7E:C0:F4:99:9B:F9:49:AA:D1:0F:1D:63:75:B1:CB:03:DD:5D:D7:BC:E3:E2:7D:2E:00:29]
    Domain verification state:
      api.prod.example.com: none
      api.test.example.com: none
      api.dev.example.com: none
    User 0:
      Verification link handling allowed: true
      Selection state:
        Disabled:
          api.prod.example.com
          api.test.example.com
          api.dev.example.com
		  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Give some time for it to complete the verification process&lt;/p&gt;

&lt;p&gt;$ adb shell pm get-app-links –user cur
 com.example
  com.example:
    ID: 4f4f913e-c4be-4b03-b782-9d6b9233396f
    Signatures: [ED:64:B4:70:53:31:7E:C0:F4:99:9B:F9:49:AA:D1:0F:1D:63:75:B1:CB:03:DD:5D:D7:BC:E3:E2:7D:2E:00:29]
    Domain verification state:
      api.prod.example.com: verified
      api.test.example.com: verified
      api.dev.example.com: verified
    User 0:
      Verification link handling allowed: true
      Selection state:
        Disabled:
          api.prod.example.com
          api.test.example.com
          api.dev.example.com&lt;/p&gt;

&lt;p&gt;I have spent hours debugging applinks which failed to open the app, instead it would try it on browser on Android 12. There are some blog posts around this which helped me troubleshooting.&lt;/p&gt;

&lt;p&gt;https://zarah.dev/2022/02/08/android12-deeplinks.html
https://handstandsam.com/2017/07/11/troubleshooting-auto-verification-of-seamless-android-app-deep-linking/&lt;/p&gt;

&lt;p&gt;With the above steps followed, it will also resolve the ambiguity on older OS versions, open the exact intended app.&lt;/p&gt;</content><author><name></name></author><summary type="html">If you are trying to access your app from web, trying to click on a link which automatically opens the app without ambiguity, you need app links to be created. Before Android 12 (API 31), adding intent filters under the Activity which needs to open on link clicking would open the app, may be with some amibguity. But if targetSdk is set to 31, there are mandatory steps need to be followed, otherwise the link can open only on the browser.</summary></entry><entry><title type="html">Accessibility on Android: make apps accessible to all the users</title><link href="http://localhost:4000/2022/06/28/Accessibility.html" rel="alternate" type="text/html" title="Accessibility on Android: make apps accessible to all the users" /><published>2022-06-28T00:00:00+05:30</published><updated>2022-06-28T00:00:00+05:30</updated><id>http://localhost:4000/2022/06/28/Accessibility</id><content type="html" xml:base="http://localhost:4000/2022/06/28/Accessibility.html">&lt;h1 id=&quot;screen-reader&quot;&gt;Screen Reader:&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;When Screen Reader is turned on, on Android devices, it automatically announces what element is in focus.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is recommended use views that Android provides which include view’s role and content required by Accessibility service.
If you need a custom button, you extend the Button rather than starting from scratch with a View.
&lt;!--more--&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In most cases, set element’s contentDescription attribute, without including its type/role. 
Screen readers automatically announce both the element’s description and type.
For example for a Camera ImageButton, set contentDescription as “Camera”. It will announce it as “Camera button, double tap to activate”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure contentDescription is unique, for example on a recyclerView list of movie, contentDescription of each item could the movie title.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Exclude TextViews, since Android accessibility services automatically announce the text itself as the description.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set android:importantForAccessibility attributes to “no” if there’s element added for decoration purpose only, for example background ImageView 
or an element which is not clickable in production but used for testing purpose.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;labelFor can be used along with EditText fields, to announce what the EditText field is meant for.
For example Username: [EditText]
add labelFor attribute to TextView created for Username: label which is a label for Username EditText.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;TextView
android:id = &quot;@+id/tvUserName 
...
android:labelFor = &quot;id/etUserName&quot;/&amp;gt;
&amp;lt;EditText
android:id = &quot;@+id/etUserName
...
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;When required to be added description of an item dynamically we can make use of StringBuilder&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val contentDescription = StringBuilder()
contentDescription.append(&quot;list item&quot;).append(movieList[position])
listItemView.setContentDescription(contentDescription);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;To override default accessibility screen reader announcements, AccessibilityDelegate can be used on all the views.
Examples:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a camera &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToggleButton&lt;/code&gt;, announce as “Turn off camera button, double tap to toggle”&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cameraToggleButton.setChecked(true);
cameraToggleButton.setTextOn(&quot;Turn Off&quot;);
cameraToggleButton.setTextOff(&quot;Turn On&quot;);

ViewCompat.setAccessibilityDelegate(cameraToggleButton, new AccessibilityDelegateCompat() {

     private boolean didPerformAccessibilityAction = false

     @Override
     public void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfoCompat info) {
      super.onInitializeAccessibilityNodeInfo(host, info);
       info.contentDescription = &quot;Camera&quot;
       info.setRoleDescription = &quot;Button&quot;
      
     }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On a Movie list item, announce as “double tap to view movie detail” and “long tap and hold to add to favorites”&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ViewCompat.setAccessibilityDelegate(itemView, new AccessibilityDelegateCompat() {

override fun onInitializeAccessibilityNodeInfo(
      host: View, info: AccessibilityNodeInfoCompat) {
    super.onInitializeAccessibilityNodeInfo(host, info)
    val click = 
      AccessibilityNodeInfoCompat.AccessibilityActionCompat(
          AccessibilityNodeInfo.ACTION_CLICK,&quot;view movie detail&quot;)
    val longClick = 
      AccessibilityNodeInfoCompat.AccessibilityActionCompat(
          AccessibilityNodeInfo.ACTION_LONG_CLICK, &quot;add to favorites&quot;)
    info.addAction(click)
    info.addAction(longClick)
  }

});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="Android" /><category term="accessibility" /><category term="contentDescription" /><category term="ScreenReader" /><category term="TalkBack" /><summary type="html">Screen Reader: When Screen Reader is turned on, on Android devices, it automatically announces what element is in focus. It is recommended use views that Android provides which include view’s role and content required by Accessibility service. If you need a custom button, you extend the Button rather than starting from scratch with a View.</summary></entry><entry><title type="html">Then Joda, Now Java 8 APIs</title><link href="http://localhost:4000/2022/05/22/Joda-Lib.html" rel="alternate" type="text/html" title="Then Joda, Now Java 8 APIs" /><published>2022-05-22T00:00:00+05:30</published><updated>2022-05-22T00:00:00+05:30</updated><id>http://localhost:4000/2022/05/22/Joda-Lib</id><content type="html" xml:base="http://localhost:4000/2022/05/22/Joda-Lib.html">&lt;h1 id=&quot;why-joda&quot;&gt;Why Joda?&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Joda-Time provides a quality replacement for the Java date and time classes.
The standard date and time classes prior to Java SE 8 are poor. By tackling this problem head-on, Joda-Time became the de facto standard date and time library for Java prior to Java SE 8.
From Java SE 8 onwards, users are asked to migrate to java.time (JSR-310).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our project minSdk is set to 23 (Android 6/7)
Joda would solve the problem of providing one set of APIs which can be used across all OS versions.&lt;/p&gt;

&lt;p&gt;Add the dependency&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;implementation 'net.danlew:android.joda:2.10.14'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Get date in the time zone&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val zone: DateTimeZone = DateTimeZone.forID(timezoneId)
val time = DateTime(zone)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From Unix to human readable date at given timezone.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val zone: DateTimeZone = DateTimeZone.forID(timezoneId)
return DateTime(receivedTime * 1000L, zone)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Manipulate current time to trigger an alarm&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var triggerTime = date.plusHours(notificationCount).plusMinutes(totalDelay).withSecondOfMinute(0).withMillisOfSecond(0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If device is in different time zone, convert to device time zone&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var deviceTime = triggerTime.withZone(DateTimeZone.getDefault())	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Convert the device time to Calender object to pass it to AlarmManager&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val time = deviceTime.toGregorianCalendar()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use this time to pass it to Alarm methods&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alarmManager.setAlarmClock(AlarmManager.AlarmClockInfo(time.timeInMillis, pendingIntent), pendingIntent)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For Unit testing:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;testImplementation 'joda-time:joda-time:2.10.14'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;update&quot;&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Now since Joda-time library is in maintenance mode, it is recommended to migrate to new Java 8 APIs, but still need to support Android 6/7 (App will crash with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NoClassDefFoundError&lt;/code&gt;). There’s a solution available only if Java 8 APIs migration would be a simple effortless task. We will come to that later, let’s first talk about the solution available.&lt;/p&gt;

&lt;h1 id=&quot;desugaring&quot;&gt;Desugaring&lt;/h1&gt;

&lt;p&gt;What’s sugaring in programming world? Why we need desugaring and how it helps with above problem?&lt;/p&gt;

&lt;p&gt;From one of the SO posts:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Sugar, in programming, usually refers to those sweet additions, mostly shortcuts, that make some constructs easier to type and to read (the latter being, in practice, the most important during the life cycle of your program).
Java is widely seen as not being concise enough, especially compared to modern languages. That’s why those additions that help make the code faster to read are welcome.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Desugaring” refers to automatically translating “sugar” constructs into other constructs when the compiler or runtime lacks native support for the sugared versions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So what we are doing here?&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;When building your app using Android Gradle plugin 4.0.0 and higher, you can use a number of Java 8 language APIs without requiring a minimum API level for your app. The Android Gradle plugin provides built-in support for using certain Java 8 language features and third-party libraries that use them.  The default toolchain implements the new language features by performing bytecode transformations, called desugar, as part of the D8/R8 compilation of class files into dex code.
So, you can include standard language APIs that were available only in recent Android releases (such as java.time) in apps that support older versions of Android.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To enable support for these language APIs on any version of the Android platform, update the Android plugin to 4.0.0 (or higher) and include the following in your app module’s build.gradle file:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android {
    defaultConfig {
        // Required when setting minSdkVersion to 20 or lower
        multiDexEnabled = true
    }

    compileOptions {
        // Flag to enable support for the new language APIs

        // For AGP 4.1+
        isCoreLibraryDesugaringEnabled = true
        // For AGP 4.0
        // coreLibraryDesugaringEnabled = true

        // Sets Java compatibility to Java 8
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

dependencies {
    coreLibraryDesugaring(&quot;com.android.tools:desugar_jdk_libs:1.1.5&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can continue using all the Java 8 Time APIs!&lt;/p&gt;

&lt;p&gt;After all the research, here is the effort that took for migrating all Joda calls to equivalent Java 8 APIs:&lt;/p&gt;

&lt;p&gt;Get date in the time zone&lt;/p&gt;

&lt;p&gt;Joda:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val zone: DateTimeZone = DateTimeZone.forID(timezoneId)
val time = DateTime(zone)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Java:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val zoneId = ZoneId.of(timezoneId)
val time = ZonedDateTime.now(zoneId)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From Unix to human readable date at given timezone.&lt;/p&gt;

&lt;p&gt;Joda:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val zone: DateTimeZone = DateTimeZone.forID(timezoneId)
return DateTime(receivedTime * 1000L, zone)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Java:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val zone: ZoneId = ZoneId.of(timezoneId)
val instant = Instant.ofEpochMilli(receivedTime * 1000L)
return ZonedDateTime.ofInstant(instant, zone)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Manipulate current time to trigger an alarm&lt;/p&gt;

&lt;p&gt;Joda:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var triggerTime = date.plusHours(notificationCount).plusMinutes(totalDelay).withSecondOfMinute(0).withMillisOfSecond(0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Java:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var triggerTime =
            date.plusHours(notificationCount.toLong()).plusMinutes(totalDelay.toLong()).withSecond(0)
                .withNano(0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If device is in different time zone, convert to device time zone&lt;/p&gt;

&lt;p&gt;Joda:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var deviceTime = triggerTime.withZone(DateTimeZone.getDefault())	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Java:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var deviceTime = triggerTime.withZoneSameLocal(ZoneId.systemDefault())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Convert the device time to Calender object to pass it to AlarmManager&lt;/p&gt;

&lt;p&gt;Joda:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val time = deviceTime.toGregorianCalendar()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Java:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val time = GregorianCalendar.from(deviceTime)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Use this time to pass it to Alarm methods&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alarmManager.setAlarmClock(AlarmManager.AlarmClockInfo(time.timeInMillis, pendingIntent), pendingIntent)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="Android" /><category term="targetSdk" /><category term="Date" /><category term="Joda-time" /><category term="Java8" /><category term="java.time" /><category term="sugar" /><category term="desugar" /><summary type="html">Why Joda? Joda-Time provides a quality replacement for the Java date and time classes. The standard date and time classes prior to Java SE 8 are poor. By tackling this problem head-on, Joda-Time became the de facto standard date and time library for Java prior to Java SE 8. From Java SE 8 onwards, users are asked to migrate to java.time (JSR-310). Our project minSdk is set to 23 (Android 6/7) Joda would solve the problem of providing one set of APIs which can be used across all OS versions. Add the dependency implementation 'net.danlew:android.joda:2.10.14' Get date in the time zone val zone: DateTimeZone = DateTimeZone.forID(timezoneId) val time = DateTime(zone) From Unix to human readable date at given timezone. val zone: DateTimeZone = DateTimeZone.forID(timezoneId) return DateTime(receivedTime * 1000L, zone) Manipulate current time to trigger an alarm var triggerTime = date.plusHours(notificationCount).plusMinutes(totalDelay).withSecondOfMinute(0).withMillisOfSecond(0) If device is in different time zone, convert to device time zone var deviceTime = triggerTime.withZone(DateTimeZone.getDefault()) Convert the device time to Calender object to pass it to AlarmManager val time = deviceTime.toGregorianCalendar() Use this time to pass it to Alarm methods alarmManager.setAlarmClock(AlarmManager.AlarmClockInfo(time.timeInMillis, pendingIntent), pendingIntent) For Unit testing: testImplementation 'joda-time:joda-time:2.10.14' Update Now since Joda-time library is in maintenance mode, it is recommended to migrate to new Java 8 APIs, but still need to support Android 6/7 (App will crash with NoClassDefFoundError). There’s a solution available only if Java 8 APIs migration would be a simple effortless task. We will come to that later, let’s first talk about the solution available. Desugaring What’s sugaring in programming world? Why we need desugaring and how it helps with above problem? From one of the SO posts: Sugar, in programming, usually refers to those sweet additions, mostly shortcuts, that make some constructs easier to type and to read (the latter being, in practice, the most important during the life cycle of your program). Java is widely seen as not being concise enough, especially compared to modern languages. That’s why those additions that help make the code faster to read are welcome. “Desugaring” refers to automatically translating “sugar” constructs into other constructs when the compiler or runtime lacks native support for the sugared versions. So what we are doing here? When building your app using Android Gradle plugin 4.0.0 and higher, you can use a number of Java 8 language APIs without requiring a minimum API level for your app. The Android Gradle plugin provides built-in support for using certain Java 8 language features and third-party libraries that use them. The default toolchain implements the new language features by performing bytecode transformations, called desugar, as part of the D8/R8 compilation of class files into dex code. So, you can include standard language APIs that were available only in recent Android releases (such as java.time) in apps that support older versions of Android. To enable support for these language APIs on any version of the Android platform, update the Android plugin to 4.0.0 (or higher) and include the following in your app module’s build.gradle file: android { defaultConfig { // Required when setting minSdkVersion to 20 or lower multiDexEnabled = true } compileOptions { // Flag to enable support for the new language APIs // For AGP 4.1+ isCoreLibraryDesugaringEnabled = true // For AGP 4.0 // coreLibraryDesugaringEnabled = true // Sets Java compatibility to Java 8 sourceCompatibility = JavaVersion.VERSION_1_8 targetCompatibility = JavaVersion.VERSION_1_8 } } dependencies { coreLibraryDesugaring(&quot;com.android.tools:desugar_jdk_libs:1.1.5&quot;) } Now you can continue using all the Java 8 Time APIs! After all the research, here is the effort that took for migrating all Joda calls to equivalent Java 8 APIs: Get date in the time zone Joda: val zone: DateTimeZone = DateTimeZone.forID(timezoneId) val time = DateTime(zone) Java: val zoneId = ZoneId.of(timezoneId) val time = ZonedDateTime.now(zoneId) From Unix to human readable date at given timezone. Joda: val zone: DateTimeZone = DateTimeZone.forID(timezoneId) return DateTime(receivedTime * 1000L, zone) Java: val zone: ZoneId = ZoneId.of(timezoneId) val instant = Instant.ofEpochMilli(receivedTime * 1000L) return ZonedDateTime.ofInstant(instant, zone) Manipulate current time to trigger an alarm Joda: var triggerTime = date.plusHours(notificationCount).plusMinutes(totalDelay).withSecondOfMinute(0).withMillisOfSecond(0) Java: var triggerTime = date.plusHours(notificationCount.toLong()).plusMinutes(totalDelay.toLong()).withSecond(0) .withNano(0) If device is in different time zone, convert to device time zone Joda: var deviceTime = triggerTime.withZone(DateTimeZone.getDefault()) Java: var deviceTime = triggerTime.withZoneSameLocal(ZoneId.systemDefault()) Convert the device time to Calender object to pass it to AlarmManager Joda: val time = deviceTime.toGregorianCalendar() Java: val time = GregorianCalendar.from(deviceTime) Use this time to pass it to Alarm methods alarmManager.setAlarmClock(AlarmManager.AlarmClockInfo(time.timeInMillis, pendingIntent), pendingIntent)</summary></entry><entry><title type="html">Bluetooth Permissions on Android 12</title><link href="http://localhost:4000/2022/05/04/bluetooth_permissions_on_android_12.html" rel="alternate" type="text/html" title="Bluetooth Permissions on Android 12" /><published>2022-05-04T00:00:00+05:30</published><updated>2022-05-04T00:00:00+05:30</updated><id>http://localhost:4000/2022/05/04/bluetooth_permissions_on_android_12</id><content type="html" xml:base="http://localhost:4000/2022/05/04/bluetooth_permissions_on_android_12.html">&lt;p&gt;Beginning with Android 12, new run-time permissions are added for accessing nearby Bluetooth devices. Without this permission any APIs related to Bluetooth devices access will result into Fatal Exception:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java.lang.SecurityException
Need android.permission.BLUETOOTH_CONNECT permission ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can use permissions for Bluetooth as follows for targetSdk set to 31 and minSdk to 23&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;uses-permission
        android:name=&quot;android.permission.BLUETOOTH&quot;
        android:maxSdkVersion=&quot;30&quot; /&amp;gt;
    &amp;lt;uses-permission
        android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot;
        android:maxSdkVersion=&quot;30&quot; /&amp;gt;
    &amp;lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_CONNECT&quot; /&amp;gt;
    &amp;lt;uses-permission
        android:name=&quot;android.permission.BLUETOOTH_SCAN&quot;
        android:usesPermissionFlags=&quot;neverForLocation&quot;
        tools:targetApi=&quot;s&quot; /&amp;gt;
    &amp;lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&amp;gt;
    &amp;lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please note that if your app makes the current device discoverable to other Bluetooth devices, that’s if the device which is running the app as master and advertising the data, then declare the BLUETOOTH_ADVERTISE permission.&lt;/p&gt;

&lt;p&gt;If you are looking for other Bluetooth devices, then declare BLUETOOTH_SCAN.&lt;/p&gt;

&lt;p&gt;If your app is doing any operations on Bluetooth devices like pairing, checking whether a peripheral is already connected, or connecting or communicate in any way, declare BLUETOOTH_CONNECT.&lt;/p&gt;

&lt;p&gt;Legacy Bluetooth permissions are required for older OS versions below Android 31.&lt;/p&gt;

&lt;p&gt;If in any way if your app is trying to derive user’s location using Scan results, then only request for Location permissions. else &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;usesPermissionFlags&lt;/code&gt; can be set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;neverForLocation&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then while requesting permissions, based on OS version, use the required run-time permission as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  private String[] getRequiredPermissions() {
        int targetSdkVersion = getApplicationInfo().targetSdkVersion;
        if (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.S &amp;amp;&amp;amp; targetSdkVersion &amp;gt;= Build.VERSION_CODES.S) {
            return new String[]{Manifest.permission.BLUETOOTH_SCAN, Manifest.permission.BLUETOOTH_CONNECT};
        } else if (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.Q &amp;amp;&amp;amp; targetSdkVersion &amp;gt;= Build.VERSION_CODES.Q) {
            return new String[]{Manifest.permission.ACCESS_FINE_LOCATION};
        } else return new String[]{Manifest.permission.ACCESS_COARSE_LOCATION};
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="Android12" /><category term="targetSdk" /><category term="Bluetooth" /><category term="BLE" /><category term="run-time" /><category term="permissions" /><category term="location" /><category term="fine_location_permission" /><summary type="html">Beginning with Android 12, new run-time permissions are added for accessing nearby Bluetooth devices. Without this permission any APIs related to Bluetooth devices access will result into Fatal Exception:</summary></entry><entry><title type="html">Welcome!</title><link href="http://localhost:4000/welcome/2022/05/03/welcome.html" rel="alternate" type="text/html" title="Welcome!" /><published>2022-05-03T23:35:34+05:30</published><updated>2022-05-03T23:35:34+05:30</updated><id>http://localhost:4000/welcome/2022/05/03/welcome</id><content type="html" xml:base="http://localhost:4000/welcome/2022/05/03/welcome.html">&lt;p&gt;You will find here some debugging, some tips and tricks from my experience.&lt;/p&gt;</content><author><name></name></author><category term="welcome" /><summary type="html">You will find here some debugging, some tips and tricks from my experience.</summary></entry></feed>